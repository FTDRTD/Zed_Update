name: Build Executable

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0

      - name: Build with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --windowed --name "ZedUpdater" --icon=icon.ico --add-data "config.example.json;." --add-data "gui_launcher.pyw;." --hidden-import PyQt5.sip --hidden-import PyQt5.QtCore --hidden-import PyQt5.QtWidgets --hidden-import PyQt5.QtGui --hidden-import win32api --hidden-import win32con --hidden-import win32file --hidden-import win32gui --hidden-import win32process --hidden-import ctypes --hidden-import ctypes.wintypes --collect-all PyQt5 gui_launcher.pyw

      - name: Build with PyInstaller (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          pyinstaller --onefile --windowed --name "ZedUpdater" --add-data "config.example.json:." --add-data "gui_launcher.pyw:." --hidden-import PyQt5.sip --hidden-import PyQt5.QtCore --hidden-import PyQt5.QtWidgets --hidden-import PyQt5.QtGui --collect-all PyQt5 gui_launcher.pyw

      - name: Create portable package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir ZedUpdater-portable-windows
          copy dist\ZedUpdater.exe ZedUpdater-portable-windows\
          copy config.example.json ZedUpdater-portable-windows\config.json
          copy README.md ZedUpdater-portable-windows\
          copy LICENSE ZedUpdater-portable-windows\

          echo "@echo off" > ZedUpdater-portable-windows\start-gui.bat
          echo "start /b ZedUpdater.exe --gui" >> ZedUpdater-portable-windows\start-gui.bat

          echo "@echo off" > ZedUpdater-portable-windows\start-gui-silent.bat
          echo "ZedUpdater.exe --gui" >> ZedUpdater-portable-windows\start-gui-silent.bat

          echo "Set objShell = CreateObject(\"WScript.Shell\")" > ZedUpdater-portable-windows\start-gui-invisible.vbs
          echo "objShell.Run \"ZedUpdater.exe --gui\", 0, False" >> ZedUpdater-portable-windows\start-gui-invisible.vbs
          echo "Set objShell = Nothing" >> ZedUpdater-portable-windows\start-gui-invisible.vbs

          echo "@echo off" > ZedUpdater-portable-windows\update-only.bat
          echo "ZedUpdater.exe --update" >> ZedUpdater-portable-windows\update-only.bat
          echo "pause" >> ZedUpdater-portable-windows\update-only.bat

      - name: Create portable package (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir ZedUpdater-portable-linux
          cp dist/ZedUpdater ZedUpdater-portable-linux/
          cp config.example.json ZedUpdater-portable-linux/config.json
          cp README.md ZedUpdater-portable-linux/
          cp LICENSE ZedUpdater-portable-linux/
          chmod +x ZedUpdater-portable-linux/ZedUpdater

          echo '#!/bin/bash' > ZedUpdater-portable-linux/start-gui.sh
          echo './ZedUpdater --gui' >> ZedUpdater-portable-linux/start-gui.sh
          chmod +x ZedUpdater-portable-linux/start-gui.sh

          echo '#!/bin/bash' > ZedUpdater-portable-linux/update-only.sh
          echo './ZedUpdater --update' >> ZedUpdater-portable-linux/update-only.sh
          echo 'read -p "Press Enter to continue..."' >> ZedUpdater-portable-linux/update-only.sh
          chmod +x ZedUpdater-portable-linux/update-only.sh

      - name: Create portable package (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir ZedUpdater-portable-macos
          cp dist/ZedUpdater ZedUpdater-portable-macos/
          cp config.example.json ZedUpdater-portable-macos/config.json
          cp README.md ZedUpdater-portable-macos/
          cp LICENSE ZedUpdater-portable-macos/
          chmod +x ZedUpdater-portable-macos/ZedUpdater

          echo '#!/bin/bash' > ZedUpdater-portable-macos/start-gui.sh
          echo './ZedUpdater --gui' >> ZedUpdater-portable-macos/start-gui.sh
          chmod +x ZedUpdater-portable-macos/start-gui.sh

          echo '#!/bin/bash' > ZedUpdater-portable-macos/update-only.sh
          echo './ZedUpdater --update' >> ZedUpdater-portable-macos/update-only.sh
          echo 'read -p "Press Enter to continue..."' >> ZedUpdater-portable-macos/update-only.sh
          chmod +x ZedUpdater-portable-macos/update-only.sh

      - name: Archive portable package (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ZedUpdater-portable-windows-py${{ matrix.python-version }}
          path: ZedUpdater-portable-windows/

      - name: Archive portable package (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ZedUpdater-portable-linux-py${{ matrix.python-version }}
          path: ZedUpdater-portable-linux/

      - name: Archive portable package (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ZedUpdater-portable-macos-py${{ matrix.python-version }}
          path: ZedUpdater-portable-macos/

      - name: Upload executable (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ZedUpdater-windows-py${{ matrix.python-version }}-exe
          path: dist/ZedUpdater.exe

      - name: Upload executable (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ZedUpdater-linux-py${{ matrix.python-version }}-bin
          path: dist/ZedUpdater

      - name: Upload executable (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ZedUpdater-macos-py${{ matrix.python-version }}-bin
          path: dist/ZedUpdater

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release archives
        run: |
          # Create zip archives for each platform
          zip -r ZedUpdater-windows.zip ZedUpdater-portable-windows-py3.11/
          tar -czf ZedUpdater-linux.tar.gz ZedUpdater-portable-linux-py3.11/
          tar -czf ZedUpdater-macos.tar.gz ZedUpdater-portable-macos-py3.11/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ZedUpdater-windows.zip
            ZedUpdater-linux.tar.gz
            ZedUpdater-macos.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
